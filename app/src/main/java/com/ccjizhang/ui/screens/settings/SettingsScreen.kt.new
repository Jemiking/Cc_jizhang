package com.ccjizhang.ui.screens.settings

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountBalance
import androidx.compose.material.icons.filled.Analytics
import androidx.compose.material.icons.filled.Article
import androidx.compose.material.icons.filled.AttachMoney
import androidx.compose.material.icons.filled.Backup
import androidx.compose.material.icons.filled.Category
import androidx.compose.material.icons.filled.ChevronRight
import androidx.compose.material.icons.filled.Code
import androidx.compose.material.icons.filled.DarkMode
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Feedback
import androidx.compose.material.icons.filled.ImportExport
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.Language
import androidx.compose.material.icons.filled.Notifications
import androidx.compose.material.icons.filled.Palette
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Security
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.filled.Speed
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.filled.Tag
import androidx.compose.material.icons.outlined.Feedback
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Divider
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Surface
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.ccjizhang.ui.components.AppInfoDialog
import com.ccjizhang.ui.components.ClearDataConfirmDialog
import com.ccjizhang.ui.components.CollapsibleSettingsGroup
import com.ccjizhang.ui.components.FeedbackDialog
import com.ccjizhang.ui.components.RoundedTopBarScaffold
import com.ccjizhang.ui.components.SettingsItem
import com.ccjizhang.ui.navigation.NavRoutes
import com.ccjizhang.ui.theme.CCJiZhangTheme
import com.ccjizhang.ui.theme.PrimaryDark
import com.ccjizhang.ui.viewmodels.SettingsViewModel
import kotlinx.coroutines.launch

/**
 * 设置页面
 * 
 * @param navController 导航控制器
 * @param onNavigateBack 返回上一页的回调
 * @param viewModel 设置页面的ViewModel
 */
@Composable
fun SettingsScreen(
    navController: NavHostController,
    onNavigateBack: () -> Unit = {},
    viewModel: SettingsViewModel = hiltViewModel()
) {
    // 获取状态和上下文
    val settingsState by viewModel.settingsState.collectAsState()
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    val scrollState = rememberScrollState()

    // 对话框状态
    var showClearDataDialog by remember { mutableStateOf(false) }
    var showAppInfoDialog by remember { mutableStateOf(false) }
    var showFeedbackDialog by remember { mutableStateOf(false) }

    // 收集操作结果
    LaunchedEffect(Unit) {
        viewModel.operationResult.collect { message ->
            snackbarHostState.showSnackbar(message)
        }
    }

    // 清除数据确认对话框
    if (showClearDataDialog) {
        ClearDataConfirmDialog(
            onConfirm = {
                viewModel.clearAllData()
                showClearDataDialog = false
            },
            onDismiss = { showClearDataDialog = false }
        )
    }

    // 应用信息对话框
    if (showAppInfoDialog) {
        AppInfoDialog(
            appVersion = settingsState.appVersion,
            buildNumber = settingsState.appBuildNumber,
            databaseVersion = settingsState.databaseVersion,
            onDismiss = { showAppInfoDialog = false }
        )
    }

    // 反馈对话框
    if (showFeedbackDialog) {
        FeedbackDialog(
            onSubmit = { content, contactInfo ->
                // 发送反馈邮件
                try {
                    val intent = Intent(Intent.ACTION_SENDTO).apply {
                        data = Uri.parse("mailto:support@ccjizhang.com")
                        putExtra(Intent.EXTRA_SUBJECT, "CC记账 - 用户反馈")
                        putExtra(Intent.EXTRA_TEXT, "反馈内容：\n$content\n\n联系方式：\n$contactInfo")
                    }
                    context.startActivity(intent)
                    scope.launch {
                        snackbarHostState.showSnackbar("感谢您的反馈！")
                    }
                } catch (e: Exception) {
                    scope.launch {
                        snackbarHostState.showSnackbar("无法发送反馈，请检查您的邮件应用设置")
                    }
                }
                showFeedbackDialog = false
            },
            onDismiss = { showFeedbackDialog = false }
        )
    }

    RoundedTopBarScaffold(
        title = "设置",
        navController = navController,
        showBackButton = true,
        onBackClick = onNavigateBack,
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
    ) { paddingValues ->
        // 显示加载状态
        if (settingsState.isLoading) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator()
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp)
                    .verticalScroll(scrollState)
            ) {
                // 用户资料卡片
                UserProfileCard(navController = navController)

                // 数据管理部分
                Text(
                    text = "数据管理",
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.padding(vertical = 16.dp)
                )

                SettingsItem(
                    icon = Icons.Default.Category,
                    title = "分类管理",
                    subtitle = "管理收入和支出分类",
                    onClick = { navController.navigate(NavRoutes.CategoryManagement) }
                )

                SettingsItem(
                    icon = Icons.Default.Tag,
                    title = "标签管理",
                    subtitle = "管理交易标签",
                    onClick = { navController.navigate(NavRoutes.TagManagement) }
                )

                SettingsItem(
                    icon = Icons.Default.AccountBalance,
                    title = "账户管理",
                    subtitle = "管理您的账户和余额",
                    onClick = { navController.navigate(NavRoutes.AccountManagement) }
                )

                // 数据备份与恢复
                SettingsItem(
                    icon = Icons.Default.Backup,
                    title = "数据备份与恢复",
                    subtitle = "备份、自动备份设置和数据恢复",
                    onClick = { navController.navigate(NavRoutes.DataBackup) }
                )

                // 安全设置
                SettingsItem(
                    icon = Icons.Default.Security,
                    title = "安全设置",
                    subtitle = "数据库加密和密码管理",
                    onClick = { navController.navigate(NavRoutes.SecuritySettings) }
                )

                // 清除数据
                SettingsItem(
                    icon = Icons.Default.Delete,
                    title = "清除数据",
                    subtitle = "清除所有账单数据",
                    onClick = { showClearDataDialog = true }
                )

                Divider(modifier = Modifier.padding(vertical = 8.dp))

                // 外观设置部分
                Text(
                    text = "外观设置",
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.padding(vertical = 16.dp)
                )

                // 深色模式
                SettingsItem(
                    icon = Icons.Default.DarkMode,
                    title = "深色模式",
                    subtitle = "切换浅色/深色主题",
                    onClick = { viewModel.toggleDarkMode() }
                )

                // 主题设置
                SettingsItem(
                    icon = Icons.Default.Palette,
                    title = "主题设置",
                    subtitle = "自定义应用主题颜色",
                    onClick = { navController.navigate(NavRoutes.ThemeSettings) }
                )

                // 货币设置
                SettingsItem(
                    icon = Icons.Default.Language,
                    title = "货币设置",
                    subtitle = "设置基准货币和汇率",
                    onClick = { navController.navigate(NavRoutes.CurrencySettings) }
                )

                // 通知设置
                SettingsItem(
                    icon = Icons.Default.Notifications,
                    title = "通知设置",
                    subtitle = "管理应用通知和提醒",
                    onClick = { navController.navigate(NavRoutes.NotificationSettings) }
                )

                Divider(modifier = Modifier.padding(vertical = 8.dp))

                // 高级功能部分（可折叠）
                CollapsibleSettingsGroup(
                    title = "高级功能",
                    icon = Icons.Default.Settings,
                    isExpanded = settingsState.isAdvancedFeaturesExpanded,
                    onToggleExpanded = { viewModel.toggleAdvancedFeaturesExpanded() }
                ) {
                    // 目标储蓄计划
                    SettingsItem(
                        icon = Icons.Default.Star,
                        title = "目标储蓄计划",
                        subtitle = "设定和跟踪您的储蓄目标",
                        onClick = { navController.navigate(NavRoutes.SavingGoals) }
                    )

                    // 定期交易自动化
                    SettingsItem(
                        icon = Icons.Default.AttachMoney,
                        title = "定期交易自动化",
                        subtitle = "设置周期性自动记账",
                        onClick = { navController.navigate(NavRoutes.RecurringTransactions) }
                    )

                    // 家庭共享记账
                    SettingsItem(
                        icon = Icons.Default.Person,
                        title = "家庭共享记账",
                        subtitle = "与家人共享账本和管理",
                        onClick = { navController.navigate(NavRoutes.FamilyMembers) }
                    )

                    // 理财产品跟踪
                    SettingsItem(
                        icon = Icons.Default.AccountBalance,
                        title = "理财产品跟踪",
                        subtitle = "管理和分析您的投资产品",
                        onClick = { navController.navigate(NavRoutes.Investments) }
                    )

                    // 财务报告生成
                    SettingsItem(
                        icon = Icons.Default.ImportExport,
                        title = "财务报告生成",
                        subtitle = "生成详细的财务状况报告",
                        onClick = { navController.navigate(NavRoutes.FinancialReports) }
                    )
                }

                // 开发者工具部分（可折叠）
                CollapsibleSettingsGroup(
                    title = "开发者工具",
                    icon = Icons.Default.Code,
                    isExpanded = settingsState.isDeveloperToolsExpanded,
                    onToggleExpanded = { viewModel.toggleDeveloperToolsExpanded() }
                ) {
                    // 导航分析报告
                    SettingsItem(
                        icon = Icons.Default.Analytics,
                        title = "导航分析报告",
                        subtitle = "查看用户导航行为分析",
                        onClick = { navController.navigate(NavRoutes.NavAnalyticsReport) }
                    )

                    // 导航性能报告
                    SettingsItem(
                        icon = Icons.Default.Speed,
                        title = "导航性能报告",
                        subtitle = "查看导航性能指标和警告",
                        onClick = { navController.navigate(NavRoutes.NavPerformanceReport) }
                    )

                    // 日志查看器
                    SettingsItem(
                        icon = Icons.Default.Article,
                        title = "日志查看器",
                        subtitle = "查看和分享应用日志",
                        onClick = { navController.navigate(NavRoutes.LogViewer) }
                    )
                }

                // 关于部分
                Text(
                    text = "关于",
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.padding(vertical = 16.dp)
                )

                // 应用信息
                SettingsItem(
                    icon = Icons.Default.Info,
                    title = "应用信息",
                    subtitle = "查看应用版本和信息",
                    onClick = { showAppInfoDialog = true }
                )

                // 反馈
                SettingsItem(
                    icon = Icons.Outlined.Feedback,
                    title = "反馈",
                    subtitle = "提供意见和反馈",
                    onClick = { showFeedbackDialog = true }
                )

                Spacer(modifier = Modifier.height(32.dp))
            }
        }
    }
}

/**
 * 用户资料卡片
 */
@Composable
fun UserProfileCard(navController: NavHostController) {
    ElevatedCard(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        colors = CardDefaults.elevatedCardColors(),
        elevation = CardDefaults.elevatedCardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // 用户头像
            Surface(
                modifier = Modifier.size(64.dp),
                shape = CircleShape,
                color = PrimaryDark,
                contentColor = Color.White
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.Person,
                        contentDescription = "用户头像",
                        modifier = Modifier.size(36.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.width(16.dp))

            // 用户信息
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = "张小明",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = "xiaoming@example.com",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            // 编辑按钮
            Icon(
                imageVector = Icons.Default.ChevronRight,
                contentDescription = "编辑个人资料",
                tint = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun SettingsScreenPreview() {
    CCJiZhangTheme {
        SettingsScreen(rememberNavController())
    }
}
